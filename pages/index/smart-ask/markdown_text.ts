// export const markdownText = `在使用 Vue 构建低代码项目时，管理平台通过拖拉拽方式生成配置化 JSON 的设计模式非常适用于快速开发和部署标准化的前端应用。针对那些无法完全由配置化平台覆盖的特殊需求（大约10%），下面是一些可以帮助开发者灵活处理这些情况的实践方法：\n\n### 1. **插件或扩展系统**\n\n建立一个插件系统，允许开发者编写自定义组件或逻辑，并将其作为插件集成到低代码平台中。这样，对于特殊的业务逻辑或用户界面需求，开发者可以通过添加插件来实现，而不是修改平台的核心代码。这种方式有利于保持平台的稳定性和可升级性。\n\n### 2. **预留代码注入点**\n\n在低代码平台的框架中预留代码注入点（Hooks），允许开发者在这些点插入自定义代码或修改现有行为。例如，可以在数据处理、渲染前后或组件初始化时提供钩子函数。这样，开发者可以在不改变整体架构的前提下，实现特定功能的定制。\n\n### 3. **模块化设计**\n\n确保平台的设计具有高度模块化，每个模块负责一块独立的功能。这样，对于需要特殊定制的部分，可以通过替换或扩展特定模块来实现，而不影响其他模块的正常运作。\n\n### 4. **参数化配置**\n\n在配置化的 JSON 结构中，增加更多的参数化选项，以提供更高的灵活性。例如，可以允许开发者通过 JSON 配置文件定义样式、行为、数据源等方面的细节。通过这种方式，可以在不直接编写代码的情况下实现更加丰富的定制功能。\n\n### 5. **脚本支持**\n\n支持在管理平台中直接编写或引入 JavaScript 脚本。这些脚本可以用来处理特殊的业务逻辑或数据处理任务。通过允许直接在平台中使用脚本，可以为开发者提供强大的定制能力，同时保持核心平台的简洁和维护性。\n\n### 6. **外部API集成**\n\n允许低代码平台通过配置调用外部API，以满足无法通过内部资源解决的特殊需求。这种方法可以扩展平台的功能，同时避免在平台内部开发复杂且难以维护的功能。\n\n通过这些策略，开发者可以为低代码平台增加必要的灵活性和扩展性，从而应对大部分非标准化的需求。这样既保持了平台的核心简洁高效，又能满足特定场景的需求。`
export const markdownText = `你好伙伴，有什么可以帮你？`